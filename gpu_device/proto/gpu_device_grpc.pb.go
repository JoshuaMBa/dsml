// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: gpu_device/proto/gpu_device.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GPUDevice_GetDeviceMetadata_FullMethodName = "/gpu_sim.GPUDevice/GetDeviceMetadata"
	GPUDevice_BeginSend_FullMethodName         = "/gpu_sim.GPUDevice/BeginSend"
	GPUDevice_BeginReceive_FullMethodName      = "/gpu_sim.GPUDevice/BeginReceive"
	GPUDevice_StreamSend_FullMethodName        = "/gpu_sim.GPUDevice/StreamSend"
	GPUDevice_GetStreamStatus_FullMethodName   = "/gpu_sim.GPUDevice/GetStreamStatus"
)

// GPUDeviceClient is the client API for GPUDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service that simulates a single GPU device
type GPUDeviceClient interface {
	GetDeviceMetadata(ctx context.Context, in *GetDeviceMetadataRequest, opts ...grpc.CallOption) (*GetDeviceMetadataResponse, error)
	// Called by the GPUCoordinator to start the data transfer between two devices.
	// Begin.*() functions are "non-blocking", meaning they return immediately after initiating the operation.
	// The actual data transfer should happen in the background initiated by the devices.
	BeginSend(ctx context.Context, in *BeginSendRequest, opts ...grpc.CallOption) (*BeginSendResponse, error)
	BeginReceive(ctx context.Context, in *BeginReceiveRequest, opts ...grpc.CallOption) (*BeginReceiveResponse, error)
	// Called by the src device to send data to the dst device.
	StreamSend(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataChunk, StreamSendResponse], error)
	// For the coordinator to know if a stream has completed.
	GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusResponse, error)
}

type gPUDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewGPUDeviceClient(cc grpc.ClientConnInterface) GPUDeviceClient {
	return &gPUDeviceClient{cc}
}

func (c *gPUDeviceClient) GetDeviceMetadata(ctx context.Context, in *GetDeviceMetadataRequest, opts ...grpc.CallOption) (*GetDeviceMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceMetadataResponse)
	err := c.cc.Invoke(ctx, GPUDevice_GetDeviceMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDeviceClient) BeginSend(ctx context.Context, in *BeginSendRequest, opts ...grpc.CallOption) (*BeginSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeginSendResponse)
	err := c.cc.Invoke(ctx, GPUDevice_BeginSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDeviceClient) BeginReceive(ctx context.Context, in *BeginReceiveRequest, opts ...grpc.CallOption) (*BeginReceiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeginReceiveResponse)
	err := c.cc.Invoke(ctx, GPUDevice_BeginReceive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDeviceClient) StreamSend(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataChunk, StreamSendResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GPUDevice_ServiceDesc.Streams[0], GPUDevice_StreamSend_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataChunk, StreamSendResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GPUDevice_StreamSendClient = grpc.ClientStreamingClient[DataChunk, StreamSendResponse]

func (c *gPUDeviceClient) GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamStatusResponse)
	err := c.cc.Invoke(ctx, GPUDevice_GetStreamStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPUDeviceServer is the server API for GPUDevice service.
// All implementations must embed UnimplementedGPUDeviceServer
// for forward compatibility.
//
// A service that simulates a single GPU device
type GPUDeviceServer interface {
	GetDeviceMetadata(context.Context, *GetDeviceMetadataRequest) (*GetDeviceMetadataResponse, error)
	// Called by the GPUCoordinator to start the data transfer between two devices.
	// Begin.*() functions are "non-blocking", meaning they return immediately after initiating the operation.
	// The actual data transfer should happen in the background initiated by the devices.
	BeginSend(context.Context, *BeginSendRequest) (*BeginSendResponse, error)
	BeginReceive(context.Context, *BeginReceiveRequest) (*BeginReceiveResponse, error)
	// Called by the src device to send data to the dst device.
	StreamSend(grpc.ClientStreamingServer[DataChunk, StreamSendResponse]) error
	// For the coordinator to know if a stream has completed.
	GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusResponse, error)
	mustEmbedUnimplementedGPUDeviceServer()
}

// UnimplementedGPUDeviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGPUDeviceServer struct{}

func (UnimplementedGPUDeviceServer) GetDeviceMetadata(context.Context, *GetDeviceMetadataRequest) (*GetDeviceMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMetadata not implemented")
}
func (UnimplementedGPUDeviceServer) BeginSend(context.Context, *BeginSendRequest) (*BeginSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginSend not implemented")
}
func (UnimplementedGPUDeviceServer) BeginReceive(context.Context, *BeginReceiveRequest) (*BeginReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginReceive not implemented")
}
func (UnimplementedGPUDeviceServer) StreamSend(grpc.ClientStreamingServer[DataChunk, StreamSendResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSend not implemented")
}
func (UnimplementedGPUDeviceServer) GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStatus not implemented")
}
func (UnimplementedGPUDeviceServer) mustEmbedUnimplementedGPUDeviceServer() {}
func (UnimplementedGPUDeviceServer) testEmbeddedByValue()                   {}

// UnsafeGPUDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPUDeviceServer will
// result in compilation errors.
type UnsafeGPUDeviceServer interface {
	mustEmbedUnimplementedGPUDeviceServer()
}

func RegisterGPUDeviceServer(s grpc.ServiceRegistrar, srv GPUDeviceServer) {
	// If the following call pancis, it indicates UnimplementedGPUDeviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GPUDevice_ServiceDesc, srv)
}

func _GPUDevice_GetDeviceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDeviceServer).GetDeviceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUDevice_GetDeviceMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDeviceServer).GetDeviceMetadata(ctx, req.(*GetDeviceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDevice_BeginSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDeviceServer).BeginSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUDevice_BeginSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDeviceServer).BeginSend(ctx, req.(*BeginSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDevice_BeginReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDeviceServer).BeginReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUDevice_BeginReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDeviceServer).BeginReceive(ctx, req.(*BeginReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDevice_StreamSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GPUDeviceServer).StreamSend(&grpc.GenericServerStream[DataChunk, StreamSendResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GPUDevice_StreamSendServer = grpc.ClientStreamingServer[DataChunk, StreamSendResponse]

func _GPUDevice_GetStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDeviceServer).GetStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUDevice_GetStreamStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDeviceServer).GetStreamStatus(ctx, req.(*GetStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPUDevice_ServiceDesc is the grpc.ServiceDesc for GPUDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPUDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gpu_sim.GPUDevice",
	HandlerType: (*GPUDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceMetadata",
			Handler:    _GPUDevice_GetDeviceMetadata_Handler,
		},
		{
			MethodName: "BeginSend",
			Handler:    _GPUDevice_BeginSend_Handler,
		},
		{
			MethodName: "BeginReceive",
			Handler:    _GPUDevice_BeginReceive_Handler,
		},
		{
			MethodName: "GetStreamStatus",
			Handler:    _GPUDevice_GetStreamStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSend",
			Handler:       _GPUDevice_StreamSend_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gpu_device/proto/gpu_device.proto",
}
