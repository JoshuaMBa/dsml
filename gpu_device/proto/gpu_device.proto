syntax = "proto3";

package gpu_sim;

option go_package = "github.com/JoshuaMBa/dsml/gpu_device/proto";

message DeviceId {
  uint64 value = 1;
}

message Rank {
  uint32 value = 1;
}

message MemAddr {
  uint64 value = 1;
}

message StreamId {
  uint64 value = 1;
}

message DeviceMetadata {
  DeviceId deviceId = 1;
  MemAddr minMemAddr = 2;
  MemAddr maxMemAddr = 3;
}

enum StreamStatus {
  IN_PROGRESS = 0;
  SUCCESS = 1;
  FAILED = 2;
}

// A service that simulates a single GPU device
service GPUDevice {
  rpc GetDeviceMetadata(GetDeviceMetadataRequest) returns (GetDeviceMetadataResponse) {}

  // Called by the GPUCoordinator to start the data transfer between two devices.
  // Begin.*() functions are "non-blocking", meaning they return immediately after initiating the operation.
  // The actual data transfer should happen in the background initiated by the devices.
  rpc BeginSend(BeginSendRequest) returns (BeginSendResponse) {}
  rpc BeginReceive(BeginReceiveRequest) returns (BeginReceiveResponse) {}

  // Called by the src device to send data to the dst device.
  rpc StreamSend(stream DataChunk) returns (StreamSendResponse) {}

  // For the coordinator to know if a stream has completed.
  rpc GetStreamStatus(GetStreamStatusRequest) returns (GetStreamStatusResponse) {}
}

message GetDeviceMetadataRequest {
}

message GetDeviceMetadataResponse {
  DeviceMetadata metadata = 1;
  map<uint32, string> rank_to_address = 2; // rank -> "IP:Port"
}

message BeginSendRequest {
  MemAddr sendBuffAddr = 1;
  uint64 numBytes = 2;
  Rank dstRank = 3;
}

message BeginSendResponse {
  bool initiated = 1;
  StreamId streamId = 2;
}

message BeginReceiveRequest {
  StreamId streamId = 1;
  MemAddr recvBuffAddr = 2;
  uint64 numBytes = 3;
  Rank srcRank = 4;
}

message BeginReceiveResponse {
  bool initiated = 1;
}

message DataChunk {
  bytes data = 1;
  // You may add more fields here
}

message StreamSendResponse {
  bool success = 1;
}

message GetStreamStatusRequest {
  StreamId streamId = 1;
}

message GetStreamStatusResponse {
  StreamStatus status = 1;
}

