// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: gpu_coordinator/proto/gpu_coordinator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GPUCoordinator_CommInit_FullMethodName      = "/gpu_sim.GPUCoordinator/CommInit"
	GPUCoordinator_GetCommStatus_FullMethodName = "/gpu_sim.GPUCoordinator/GetCommStatus"
	GPUCoordinator_GroupStart_FullMethodName    = "/gpu_sim.GPUCoordinator/GroupStart"
	GPUCoordinator_GroupEnd_FullMethodName      = "/gpu_sim.GPUCoordinator/GroupEnd"
	GPUCoordinator_AllReduceRing_FullMethodName = "/gpu_sim.GPUCoordinator/AllReduceRing"
	GPUCoordinator_Memcpy_FullMethodName        = "/gpu_sim.GPUCoordinator/Memcpy"
)

// GPUCoordinatorClient is the client API for GPUCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service that simulates a coordinator that manages multiple GPU devices
type GPUCoordinatorClient interface {
	CommInit(ctx context.Context, in *CommInitRequest, opts ...grpc.CallOption) (*CommInitResponse, error)
	GetCommStatus(ctx context.Context, in *GetCommStatusRequest, opts ...grpc.CallOption) (*GetCommStatusResponse, error)
	// Group operations wrapper
	GroupStart(ctx context.Context, in *GroupStartRequest, opts ...grpc.CallOption) (*GroupStartResponse, error)
	GroupEnd(ctx context.Context, in *GroupEndRequest, opts ...grpc.CallOption) (*GroupEndResponse, error)
	// RPCs for group or peer-to-peer communication
	AllReduceRing(ctx context.Context, in *AllReduceRingRequest, opts ...grpc.CallOption) (*AllReduceRingResponse, error)
	// Host-to-device data transfer and vice versa
	// You may implement this as streaming as well
	Memcpy(ctx context.Context, in *MemcpyRequest, opts ...grpc.CallOption) (*MemcpyResponse, error)
}

type gPUCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewGPUCoordinatorClient(cc grpc.ClientConnInterface) GPUCoordinatorClient {
	return &gPUCoordinatorClient{cc}
}

func (c *gPUCoordinatorClient) CommInit(ctx context.Context, in *CommInitRequest, opts ...grpc.CallOption) (*CommInitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommInitResponse)
	err := c.cc.Invoke(ctx, GPUCoordinator_CommInit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUCoordinatorClient) GetCommStatus(ctx context.Context, in *GetCommStatusRequest, opts ...grpc.CallOption) (*GetCommStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommStatusResponse)
	err := c.cc.Invoke(ctx, GPUCoordinator_GetCommStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUCoordinatorClient) GroupStart(ctx context.Context, in *GroupStartRequest, opts ...grpc.CallOption) (*GroupStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupStartResponse)
	err := c.cc.Invoke(ctx, GPUCoordinator_GroupStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUCoordinatorClient) GroupEnd(ctx context.Context, in *GroupEndRequest, opts ...grpc.CallOption) (*GroupEndResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupEndResponse)
	err := c.cc.Invoke(ctx, GPUCoordinator_GroupEnd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUCoordinatorClient) AllReduceRing(ctx context.Context, in *AllReduceRingRequest, opts ...grpc.CallOption) (*AllReduceRingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllReduceRingResponse)
	err := c.cc.Invoke(ctx, GPUCoordinator_AllReduceRing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUCoordinatorClient) Memcpy(ctx context.Context, in *MemcpyRequest, opts ...grpc.CallOption) (*MemcpyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemcpyResponse)
	err := c.cc.Invoke(ctx, GPUCoordinator_Memcpy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPUCoordinatorServer is the server API for GPUCoordinator service.
// All implementations must embed UnimplementedGPUCoordinatorServer
// for forward compatibility.
//
// A service that simulates a coordinator that manages multiple GPU devices
type GPUCoordinatorServer interface {
	CommInit(context.Context, *CommInitRequest) (*CommInitResponse, error)
	GetCommStatus(context.Context, *GetCommStatusRequest) (*GetCommStatusResponse, error)
	// Group operations wrapper
	GroupStart(context.Context, *GroupStartRequest) (*GroupStartResponse, error)
	GroupEnd(context.Context, *GroupEndRequest) (*GroupEndResponse, error)
	// RPCs for group or peer-to-peer communication
	AllReduceRing(context.Context, *AllReduceRingRequest) (*AllReduceRingResponse, error)
	// Host-to-device data transfer and vice versa
	// You may implement this as streaming as well
	Memcpy(context.Context, *MemcpyRequest) (*MemcpyResponse, error)
	mustEmbedUnimplementedGPUCoordinatorServer()
}

// UnimplementedGPUCoordinatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGPUCoordinatorServer struct{}

func (UnimplementedGPUCoordinatorServer) CommInit(context.Context, *CommInitRequest) (*CommInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommInit not implemented")
}
func (UnimplementedGPUCoordinatorServer) GetCommStatus(context.Context, *GetCommStatusRequest) (*GetCommStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommStatus not implemented")
}
func (UnimplementedGPUCoordinatorServer) GroupStart(context.Context, *GroupStartRequest) (*GroupStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupStart not implemented")
}
func (UnimplementedGPUCoordinatorServer) GroupEnd(context.Context, *GroupEndRequest) (*GroupEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupEnd not implemented")
}
func (UnimplementedGPUCoordinatorServer) AllReduceRing(context.Context, *AllReduceRingRequest) (*AllReduceRingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReduceRing not implemented")
}
func (UnimplementedGPUCoordinatorServer) Memcpy(context.Context, *MemcpyRequest) (*MemcpyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Memcpy not implemented")
}
func (UnimplementedGPUCoordinatorServer) mustEmbedUnimplementedGPUCoordinatorServer() {}
func (UnimplementedGPUCoordinatorServer) testEmbeddedByValue()                        {}

// UnsafeGPUCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPUCoordinatorServer will
// result in compilation errors.
type UnsafeGPUCoordinatorServer interface {
	mustEmbedUnimplementedGPUCoordinatorServer()
}

func RegisterGPUCoordinatorServer(s grpc.ServiceRegistrar, srv GPUCoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedGPUCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GPUCoordinator_ServiceDesc, srv)
}

func _GPUCoordinator_CommInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUCoordinatorServer).CommInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUCoordinator_CommInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUCoordinatorServer).CommInit(ctx, req.(*CommInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUCoordinator_GetCommStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUCoordinatorServer).GetCommStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUCoordinator_GetCommStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUCoordinatorServer).GetCommStatus(ctx, req.(*GetCommStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUCoordinator_GroupStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUCoordinatorServer).GroupStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUCoordinator_GroupStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUCoordinatorServer).GroupStart(ctx, req.(*GroupStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUCoordinator_GroupEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUCoordinatorServer).GroupEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUCoordinator_GroupEnd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUCoordinatorServer).GroupEnd(ctx, req.(*GroupEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUCoordinator_AllReduceRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllReduceRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUCoordinatorServer).AllReduceRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUCoordinator_AllReduceRing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUCoordinatorServer).AllReduceRing(ctx, req.(*AllReduceRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUCoordinator_Memcpy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemcpyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUCoordinatorServer).Memcpy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUCoordinator_Memcpy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUCoordinatorServer).Memcpy(ctx, req.(*MemcpyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPUCoordinator_ServiceDesc is the grpc.ServiceDesc for GPUCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPUCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gpu_sim.GPUCoordinator",
	HandlerType: (*GPUCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommInit",
			Handler:    _GPUCoordinator_CommInit_Handler,
		},
		{
			MethodName: "GetCommStatus",
			Handler:    _GPUCoordinator_GetCommStatus_Handler,
		},
		{
			MethodName: "GroupStart",
			Handler:    _GPUCoordinator_GroupStart_Handler,
		},
		{
			MethodName: "GroupEnd",
			Handler:    _GPUCoordinator_GroupEnd_Handler,
		},
		{
			MethodName: "AllReduceRing",
			Handler:    _GPUCoordinator_AllReduceRing_Handler,
		},
		{
			MethodName: "Memcpy",
			Handler:    _GPUCoordinator_Memcpy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpu_coordinator/proto/gpu_coordinator.proto",
}
